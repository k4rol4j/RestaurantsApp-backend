generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Table {
  id           Int     @id @default(autoincrement())
  restaurantId Int
  seats        Int // 1,2,4,6...
  name         String? // np. "A1"
  isActive     Boolean @default(true)

  restaurant   Restaurant         @relation(fields: [restaurantId], references: [id])
  reservations ReservationTable[]

  @@index([restaurantId, seats])
}

model Restaurant {
  id           Int           @id @default(autoincrement())
  name         String
  location     String
  cuisine      String
  rating       Float
  reservations Reservation[]
  reviews      Review[]
  favorites    Favorite[]
  latitude     Float?
  longitude    Float?
  imageUrl     String?
  description  String?
  imageGallery String?
  openingHours String?
  capacity     Int           @default(50)
  tables       Table[]
}

model Review {
  id            Int      @id @default(autoincrement())
  userId        Int
  rating        Int
  comment       String
  date          DateTime @default(now())
  restaurantId  Int
  reservationId Int?     @unique

  restaurant  Restaurant   @relation(fields: [restaurantId], references: [id])
  reservation Reservation? @relation(fields: [reservationId], references: [id]) // ‚Üê relacja opcjonalna!
  user        User?        @relation(fields: [userId], references: [id])
}

model Reservation {
  id              Int                @id @default(autoincrement())
  date            DateTime
  time            String
  people          Int
  durationMinutes Int                @default(90)
  endAt           DateTime
  tables          ReservationTable[]

  restaurantId Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])

  userId Int
  user   User @relation(fields: [userId], references: [id])

  review Review?
}

model Favorite {
  id           Int        @id @default(autoincrement())
  userId       Int
  restaurantId Int
  user         User       @relation(fields: [userId], references: [id])
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])

  @@unique([userId, restaurantId])
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  password     String
  createdAt    DateTime      @default(now())
  reviews      Review[]
  reservations Reservation[]
  favorites    Favorite[]
}

model ReservationTable {
  reservationId Int
  tableId       Int

  reservation Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  table       Table       @relation(fields: [tableId], references: [id], onDelete: Cascade)

  @@id([reservationId, tableId])
}
